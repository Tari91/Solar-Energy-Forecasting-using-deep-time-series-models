import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Step 1: Generate synthetic solar energy data
def generate_solar_data(days=365*2, freq='H'):
    rng = pd.date_range('2022-01-01', periods=days*24, freq=freq)
    data = pd.DataFrame(index=rng)
    
    # Simulate solar irradiance (max ~1000 W/mÂ² during the day)
    hours = data.index.hour
    day_factor = np.clip(np.sin((hours - 6) * np.pi / 12), 0, 1)
    seasonal_factor = 0.75 + 0.25 * np.sin(2 * np.pi * data.index.dayofyear / 365.0)
    noise = np.random.normal(0, 50, len(data))
    data['irradiance'] = day_factor * seasonal_factor * 1000 + noise
    
    # Simulate temperature (daily pattern + seasonal)
    temp_day = 15 + 10 * day_factor + 10 * np.sin(2 * np.pi * data.index.dayofyear / 365.0)
    data['temperature'] = temp_day + np.random.normal(0, 2, len(data))

    # Simulate solar energy production (function of irradiance)
    data['energy_output'] = 0.15 * data['irradiance'] + np.random.normal(0, 20, len(data))

    return data

# Step 2: Prepare time series data
def create_sequences(data, look_back=24):
    X, y = [], []
    for i in range(len(data) - look_back):
        X.append(data[i:i + look_back])
        y.append(data[i + look_back][0])  # Predict energy_output
    return np.array(X), np.array(y)

# Generate and preprocess data
df = generate_solar_data()
features = ['irradiance', 'temperature', 'energy_output']

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[features])

look_back = 24  # Use past 24 hours
X, y = create_sequences(scaled_data, look_back)

# Reshape for LSTM
X = X.reshape((X.shape[0], X.shape[1], X.shape[2]))

# Train/test split
split = int(0.8 * len(X))
X_train, y_train = X[:split], y[:split]
X_test, y_test = X[split:], y[split:]

# Step 3: Build LSTM model
model = Sequential([
    LSTM(64, input_shape=(look_back, X.shape[2]), return_sequences=False),
    Dense(32, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')
model.summary()

# Step 4: Train the model
history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Step 5: Evaluate and visualize
predictions = model.predict(X_test)

# Inverse transform to original scale
output_index = features.index('energy_output')
dummy = np.zeros((len(predictions), len(features)))
dummy[:, output_index] = predictions.flatten()
predicted_energy = scaler.inverse_transform(dummy)[:, output_index]

dummy[:, output_index] = y_test.flatten()
true_energy = scaler.inverse_transform(dummy)[:, output_index]

# Plot results
plt.figure(figsize=(12, 5))
plt.plot(true_energy, label='Actual Energy Output')
plt.plot(predicted_energy, label='Predicted Energy Output', alpha=0.7)
plt.title('Solar Energy Forecasting - LSTM')
plt.xlabel('Time Step')
plt.ylabel('Energy Output')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
